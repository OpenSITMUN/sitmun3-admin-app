buildscript {
  repositories {
    mavenLocal()
    jcenter()
    maven { url "http://repo.spring.io/plugins-release" }
    maven { url "https://plugins.gradle.org/m2/" }
  }
  dependencies {
    classpath "org.springframework.boot:spring-boot-gradle-plugin:${spring_boot_version}"
  }
}


plugins {
  id "org.sonarqube" version "2.6.2"
  id "com.moowork.node" version "1.2.0"
  id 'org.ajoberstar.grgit' version '2.2.0'
}

apply plugin: 'java'
sourceCompatibility = 1.8
targetCompatibility = 1.8

apply plugin: 'maven-publish'
apply plugin: 'jacoco'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

apply plugin: 'idea'

group = 'org.sitmun'
version = "${sitmun_version}"

repositories {
    mavenLocal()
    mavenCentral()
}

// Dependencies to other SITMUN plugins must declared all here to facilitate using them
// in different places of this script
ext {    
    sitmunlibs = [:]
    sitmunlibs.sitmuncore = [
        gitrepo : 'https://github.com/sitmun/sitmun-plugin-core.git',
        groupId : 'org.sitmun',
        artifactId : 'sitmun-plugin-core',
        version : 'develop'
    ]
}

dependencies {    
    sitmunlibs.each { k,v -> compile "${v.groupId}:${v.artifactId}:${v.version}" }
    compile "io.springfox:springfox-data-rest:${springfox_swagger_version}"
    compile "io.springfox:springfox-swagger2:${springfox_swagger_version}"
    compile "io.springfox:springfox-swagger-ui:${springfox_swagger_version}"

    if (project.hasProperty('oracle')) {
        compile "com.zaxxer:HikariCP:${hikaricp_version}"
        compile "com.oracle:ojdbc7:${ojdbc7_version}"
    } else if (project.hasProperty('postgresql')) {
        compile "com.zaxxer:HikariCP:${hikaricp_version}"
        compile "org.postgresql:postgresql:${postgresql_version}"
    } else {
        compile 'com.h2database:h2'
        compile 'org.springframework.boot:spring-boot-devtools'
    }

  testImplementation 'org.springframework.boot:spring-boot-starter-test'
  testImplementation 'com.h2database:h2'
}

def profiles = 'h2'

bootRun {
    if (project.hasProperty('h2')) {
        profiles = 'h2'
    } else if (project.hasProperty('oracle')) {
        profiles = 'oracle'
    } else if (project.hasProperty('postgresql')) {
        profiles = 'postgresql'
    }
    args = ["--spring.profiles.active=" + profiles]
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId group
            artifactId 'sitmun-admin-app'
            version version

            from components.java
        }
    }
}

sonarqube {
    properties {
        property 'sonar.host.url', 'https://sonarcloud.io'
        property 'sonar.organization', 'sitmun'     
    }
}

task cloneSitmunPlugins() {
    description = 'Clone the git repositories declared in sitmunlibs to a temporary directory.'            
    doLast {        
        // Create temporary directory
        ext.plugindir = File.createTempDir().toString()
      println(ext.plugindir)
        sitmunlibs.each { k, v ->            
            grgit.clone {
              dir = "${cloneSitmunPlugins.plugindir}/${v.artifactId}"
              uri = "${v.gitrepo}"
              refToCheckout = "${v.version}"
            }
        }
    }
}

task installSitmunPlugins(dependsOn: 'cloneSitmunPlugins') {
    description = 'Install dependency repos, cleans and installs the git repositories declared in sitmunlibs in a temporary directory. Depends on cloneSitmunPlugins.'
    doLast {        
        // It creates a temporary GradleBuild task for each sitmun dependency in sitmunlibs
        // and runs the specified tasks for each
        sitmunlibs.each { k,v -> 
            def tempTask = tasks.create(name: "install_${v.artifactId}", type: GradleBuild)
            tempTask.buildFile = file("${cloneSitmunPlugins.plugindir}/${v.artifactId}/build.gradle")
            tempTask.startParameter.projectProperties['customVersion'] = v.version
            tempTask.tasks = ['clean', 'install', 'buildJS']
            tempTask.execute()

            copy  {
              from "${cloneSitmunPlugins.plugindir}/${v.artifactId}/dist"
              into "node_modules"
            }
        }
        try {
            delete cloneSitmunPlugins.plugindir
        } catch (Exception e) {
            println("Temp directory ${cloneSitmunPlugins.plugindir} was not deleted. You can safely delete it afterwards.")
        }
    }
}

node {
  version = "${node_version}"
  npmVersion = "${npm_version}"
  yarnVersion = "${yarn_version}"
  download = "${node_download}"
}

task npmRebuild(type: NpmTask, dependsOn: npm_install) {
  args = ['rebuild', 'node-sass']
}

task npmBuildSitmunAdminApp(type: NpmTask, dependsOn: [installSitmunPlugins]) {
  args = ['run-script', 'build']
}

installSitmunPlugins.dependsOn(npmRebuild)
processResources.dependsOn(npmBuildSitmunAdminApp)
compileJava.dependsOn(installSitmunPlugins)

task install(dependsOn: [publishToMavenLocal, npmBuildSitmunAdminApp])
