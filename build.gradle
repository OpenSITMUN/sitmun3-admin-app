plugins {
    id 'org.springframework.boot' version '1.5.8.RELEASE'
    id 'org.sonarqube' version '2.6'
    id 'org.ajoberstar.grgit' version '2.2.0'
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'maven-publish'
apply plugin: 'application'
apply plugin: 'jacoco'

group = 'org.sitmun'
version = '0.1.0-SNAPSHOT'

repositories {
    mavenLocal()
    mavenCentral()
}

// Dependencies to other SITMUN plugins must declared all here to facilitate using them
// in different places of this script
ext {    
    sitmunlibs = [:]
    sitmunlibs.sitmuncore = [
        gitrepo : 'https://github.com/sitmun/sitmun-plugin-core.git',
        groupId : 'org.sitmun',
        artifactId : 'sitmun-plugin-core',
        version : '0.1.0-SNAPSHOT'
    ]
}

dependencies {    
    sitmunlibs.each { k,v -> compile "${v.groupId}:${v.artifactId}:${v.version}" }
    // compile 'org.springframework.data:spring-data-rest-hal-browser'
    compile 'com.zaxxer:HikariCP:2.6.0'
    //compile 'com.oracle:ojdbc7:12.1.0.2'   
    compile 'io.springfox:springfox-data-rest:2.8.0'
	compile 'io.springfox:springfox-swagger2:2.8.0'
	compile 'io.springfox:springfox-swagger-ui:2.8.0'     
    testCompile 'org.springframework.boot:spring-boot-starter-test'
}


publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId group
            artifactId 'sitmun-admin-app'
            version version

            from components.java
        }
    }
}

sonarqube {
    properties {
        property 'sonar.host.url', 'https://sonarcloud.io'
        property 'sonar.organization', 'sitmun'     
    }
}


task install(dependsOn: 'publishToMavenLocal')

// This custom task clones the git repositories of all sitmun dependencies defined in sitmunlibs
// It requires that a PLUGIN_DIR environment variable exists and has been exported. It will
// fail with an exception if it does not find one
task cloneDependencyRepos {
  doLast {
    def plugindir = System.getenv('PLUGIN_DIR')
    if (plugindir == null) { throw new Exception("${plugindir} is not a valid directory for the git cloning. You must define and export a PLUGIN_DIR environment variable.") }
    sitmunlibs.each { k, v ->            
        grgit.clone(dir: "${plugindir}/${v.artifactId}", uri: "${v.gitrepo}", refToCheckout: "${v.version}")
    }        
  }
}
